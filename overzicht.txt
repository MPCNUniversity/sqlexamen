vraag 1 : Toon alle kolommen en rijen uit staff
------------------------------------------------

USE sakila;
SELECT *
FROM staff
;


------------------------------------------------
vraag 2: Toon city_id en city uit city voor alle rijen.
----------------------------------------------------

SELECT city.city_id, city.city
FROM city
;


----------------------------------------------
vraag 3 : Toon alle rijen uit customer waarvoor de klant actief is.
---------------------------------------------------------

SELECT *
FROM customer
WHERE customer.active = 1
;


----------------------------------------------------------
vraag 4 : Toon alle rijen uit payment die plaatsvonden in juli 2005.
-------------------------------------------------------------------

SELECT *
FROM payment
WHERE payment.payment_date LIKE '2005-07%'
;


---------------------------------------------------------------------
vraag 5 : Toon de 15 meest recente rijen uit rental, gesorteerd op rental_date van nieuw naar oud.
-----------------------------------------------------------------------------------------------

SELECT *
FROM rental
ORDER BY rental.rental_date DESC
LIMIT 15
;


------------------------------------------------------------------------------
vraag 6 : Toon de eerste 20 klanten alfabetisch op last_name, en dan op first_name.
------------------------------------------------------------------------------------

SELECT customer.last_name, customer.first_name
FROM customer
ORDER by customer.last_name ASC
LIMIT 20
;


-----------------------------------------------------------------------
vraag 7 : Voeg één nieuwe rij toe aan language met een zelfgekozen name en huidige datum/tijd voor last_update.
-------------------------------------------------------------------------------------------------------------

INSERT INTO language (language.name)
VALUES ("Friedelees")
;


---------------------------------------------------------------------------------------
vraag 8 : Voeg 2 nieuwe rijen toe aan language in één opdracht
--------------------------------------------------------------------------

INSERT INTO language (language.name)
VALUES ("Nepalees"),
	("Baskisch")
;


------------------------------------------------------------------------------
vraag 9 : Toon voor elke klant de volledige naam (first_name + last_name) en zijn/haar city.
-------------------------------------------------------------------------------------------

SELECT concat(customer.first_name,' ',customer.last_name), city.city
FROM customer
LEFT JOIN address USING (address_id)
LEFT JOIN city on address.city_id = city.city_id
;


----------------------------------------------------------------------------------
vraag 10 :  Toon per store de manager (voor- en achternaam) en het adres van de store. (gebruik store, staff, address)
-------------------------------------------------------------------------------------

SELECT concat(staff.first_name,' ',staff.last_name) as manager,  address.address as adres_van_de_store
FROM store
LEFT JOIN staff on store.manager_staff_id = staff.staff_id
LEFT JOIN address on store.address_id = address.address_id
;


-------------------------------------------------------------------------------------
vraag 11 :Toon per store het aantal rentals in 2005, gesorteerd van hoog naar laag.
-------------------------------------------------------------------------------------

SELECT store.store_id, count(rental.rental_id) as aantal_rentals_2005
FROM store
LEFT JOIN staff on store.manager_staff_id = staff.staff_id
LEFT JOIN rental on staff.staff_id = rental.staff_id
GROUP BY store.store_id
ORDER by aantal_rentals_2005 DESC
;


---------------------------------------------------------------------------------------
vraag 12 :Toon per customer het totale betaalde bedrag (som van payment.amount). Toon enkel klanten met een totaal > 100 en sorteer van hoog naar laag.
---------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT concat(customer.first_name,' ',customer.last_name) as klant, SUM(payment.amount) AS totale_betaalde_bedrag
FROM customer
left JOIN payment using (customer_id)
GROUP BY klant
HAVING totale_betaalde_bedrag > 100
ORDER BY totale_betaalde_bedrag DESC
;


--------------------------------------------------------------------------------------------------------------------
vraag 13 : Maak een view die per city het aantal klanten bevat.  Kolommen: city_id, city, customer_count.
------------------------------------------------------------------------------------------------------------------

DROP VIEW aantal_klanten_per_city;
CREATE VIEW aantal_klanten_per_city
AS
SELECT city.city, count(customer.customer_id) as customer_count
FROM city
LEFT JOIN address on city.city_id = address.city_id
LEFT JOIN customer on address.address_id = customer.address_id
GROUP BY city.city_id
ORDER BY customer_count DESC
;


-----------------------------------------------------------------------------------------------------------
vraag 14 : Schrijf een stored procedure die : IN : first_name en last_name van een customer  OUT : het aantal films dat deze klant gehuurd heeft (tellen op basis van rental/customer) en dat aantal in de OUT-parameter plaatst.
----------------------------------------------------------------------------------------------------------------------------------------------------

DROP PROCEDURE IF EXISTS count_customer_films;
DELIMITER //
CREATE PROCEDURE count_customer_films(OUT aantal_films INT)
BEGIN
SELECT concat(customer.first_name, customer.last_name) as klant, COUNT(rental.rental_id) as aantal
FROM customer
LEFT JOIN rental USING (customer_id)
END //
DELIMITER ;


----------------------------------------------------------------------------------------------------------------------------
vraag 15 : 	Maak een nieuwe database met een passende naam en selecteer die.
		Maak tabellen:
			- developer(developer_id PK, first_name, last_name, email)
			- project(project_id PK, name)
			- project_developer(developer_id, project_id, role VARCHAR(50)) met primaire sleutel (developer_id),project_id) en verwijzingen naar developer en 				project.
-------------------------------------------------------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS db_developerprojects
	CHARACTER SET utf8mb4
    COLLATE utf8mb4_unicode_ci ;

--------------

USE DATABASE db_developerprojects;

-----------

CREATE TABLE developer (
	developer_id INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL
);

-----------------

CREATE TABLE project (
    project_id INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

---------------

CREATE TABLE project_developer (
	developer_id INT(10) UNSIGNED PRIMARY KEY,
    project_id INT(10) UNSIGNED PRIMARY KEY,
    role VARCHAR(50) NOT NULL,
    PRIMARY KEY (developer_id) REFERENCES developer(developer_id)
    	ON DELETE RESTRICT
    	ON UPDATE RESTRICT,
    PRIMARY KEY (project_id) REFERENCES project(project_id)
    	ON DELETE RESTRICT
    	ON UPDATE RESTRICT
);


